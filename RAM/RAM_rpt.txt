Coverage Report by instance with details

=================================================================================
=== Instance: /RAM_top/vif
=== Design Unit: work.RAM_if
=================================================================================
Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         60        60         0   100.00%

================================Toggle Details================================

Toggle Coverage for instance /RAM_top/vif --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                               clk           1           1      100.00 
                                          din[9-0]           1           1      100.00 
                                         dout[7-0]           1           1      100.00 
                                     dout_ref[7-0]           1           1      100.00 
                                             rst_n           1           1      100.00 
                                          tx_valid           1           1      100.00 
                                      tx_valid_ref           1           1      100.00 

Total Node Count     =         30 
Toggled Node Count   =         30 
Untoggled Node Count =          0 

Toggle Coverage      =     100.00% (60 of 60 bins)

=================================================================================
=== Instance: /RAM_top/dut/ram_assertions_inst
=== Design Unit: work.RAM_assertions
=================================================================================

Assertion Coverage:
    Assertions                       5         5         0   100.00%
--------------------------------------------------------------------
Name                 File(Line)                   Failure      Pass 
                                                  Count        Count
--------------------------------------------------------------------
/RAM_top/dut/ram_assertions_inst/assert_reset_outputs
                     RAM_assertions.sv(13)              0          1
/RAM_top/dut/ram_assertions_inst/assert_tx_valid_input
                     RAM_assertions.sv(22)              0          1
/RAM_top/dut/ram_assertions_inst/assert_tx_valid_read
                     RAM_assertions.sv(31)              0          1
/RAM_top/dut/ram_assertions_inst/assert_write_sequence
                     RAM_assertions.sv(49)              0          1
/RAM_top/dut/ram_assertions_inst/assert_read_sequence
                     RAM_assertions.sv(67)              0          1

Directive Coverage:
    Directives                       5         5         0   100.00%

DIRECTIVE COVERAGE:
--------------------------------------------------------------------------------------------
Name                                     Design Design   Lang File(Line)      Hits Status    
                                         Unit   UnitType                                     
--------------------------------------------------------------------------------------------
/RAM_top/dut/ram_assertions_inst/cover_reset_outputs 
                                         RAM_assertions Verilog  SVA  RAM_assertions.sv(16)
                                                                                66 Covered   
/RAM_top/dut/ram_assertions_inst/cover_tx_valid_input 
                                         RAM_assertions Verilog  SVA  RAM_assertions.sv(25)
                                                                              2322 Covered   
/RAM_top/dut/ram_assertions_inst/cover_tx_valid_read 
                                         RAM_assertions Verilog  SVA  RAM_assertions.sv(34)
                                                                               655 Covered   
/RAM_top/dut/ram_assertions_inst/cover_write_sequence 
                                         RAM_assertions Verilog  SVA  RAM_assertions.sv(52)
                                                                               344 Covered   
/RAM_top/dut/ram_assertions_inst/cover_read_sequence 
                                         RAM_assertions Verilog  SVA  RAM_assertions.sv(70)
                                                                              1091 Covered   
Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         42        42         0   100.00%

================================Toggle Details================================

Toggle Coverage for instance /RAM_top/dut/ram_assertions_inst --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                               clk           1           1      100.00 
                                          din[0-9]           1           1      100.00 
                                         dout[0-7]           1           1      100.00 
                                             rst_n           1           1      100.00 
                                          tx_valid           1           1      100.00 

Total Node Count     =         21 
Toggled Node Count   =         21 
Untoggled Node Count =          0 

Toggle Coverage      =     100.00% (42 of 42 bins)

=================================================================================
=== Instance: /RAM_top/dut
=== Design Unit: work.RAM
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                         7         7         0   100.00%

================================Branch Details================================

Branch Coverage for instance /RAM_top/dut

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File RAM.v
------------------------------------IF Branch------------------------------------
    14                                      3036     Count coming in to IF
    14              1                         66         if (~rst_n) begin
    21              1                       2969             if (rx_valid) begin
                                               1     All False Count
Branch totals: 3 hits of 3 branches = 100.00%

------------------------------------CASE Branch------------------------------------
    22                                      2969     Count coming in to CASE
    23              1                        368                     2'b00 : Wr_Addr <= din[7:0];
    24              1                        188                     2'b01 : MEM[Wr_Addr] <= din[7:0];
    25              1                       1758                     2'b10 : Rd_Addr <= din[7:0];
    26              1                        655                     2'b11 : dout <= MEM[Rd_Addr];
Branch totals: 4 hits of 4 branches = 100.00%


Expression Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Expressions                      2         2         0   100.00%

================================Expression Details================================

Expression Coverage for instance /RAM_top/dut --

  File RAM.v
----------------Focused Expression View-----------------
Line       30 Item    1  (din[9] && din[8])
Expression totals: 2 of 2 input terms covered = 100.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
      din[9]         Y
      din[8]         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  din[9]_0              -                             
  Row   2:          1  din[9]_1              din[8]                        
  Row   3:          1  din[8]_0              din[9]                        
  Row   4:          1  din[8]_1              din[9]                        


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      10        10         0   100.00%

================================Statement Details================================

Statement Coverage for instance /RAM_top/dut --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File RAM.v
    1                                                module RAM (din,clk,rst_n,rx_valid,dout,tx_valid);
    2                                                
    3                                                input      [9:0] din;
    4                                                input            clk, rst_n, rx_valid;
    5                                                
    6                                                output reg [7:0] dout;
    7                                                output reg       tx_valid;
    8                                                
    9                                                reg [7:0] MEM [255:0];
    10                                               
    11                                               reg [7:0] Rd_Addr, Wr_Addr;
    12                                               
    13              1                       3036     always @(posedge clk) begin
    14                                                   if (~rst_n) begin
    15              1                         66             dout <= 0;
    16              1                         66             tx_valid <= 0;
    17              1                         66             Rd_Addr <= 0;
    18              1                         66             Wr_Addr <= 0;
    19                                                   end
    20                                                   else                                           
    21                                                       if (rx_valid) begin
    22                                                           case (din[9:8])
    23              1                        368                     2'b00 : Wr_Addr <= din[7:0];
    24              1                        188                     2'b01 : MEM[Wr_Addr] <= din[7:0];
    25              1                       1758                     2'b10 : Rd_Addr <= din[7:0];
    26              1                        655                     2'b11 : dout <= MEM[Rd_Addr];
    27                                                               default : dout <= 0;
    28                                                           endcase
    29                                               
    30              1                       2969                 tx_valid <= (din[9] && din[8])? 1'b1 : 1'b0;

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         74        74         0   100.00%

================================Toggle Details================================

Toggle Coverage for instance /RAM_top/dut --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                      Rd_Addr[7-0]           1           1      100.00 
                                      Wr_Addr[7-0]           1           1      100.00 
                                               clk           1           1      100.00 
                                          din[0-9]           1           1      100.00 
                                         dout[7-0]           1           1      100.00 
                                             rst_n           1           1      100.00 
                                          tx_valid           1           1      100.00 

Total Node Count     =         37 
Toggled Node Count   =         37 
Untoggled Node Count =          0 

Toggle Coverage      =     100.00% (74 of 74 bins)

=================================================================================
=== Instance: /RAM_top/golden
=== Design Unit: work.RAM_golden
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                         8         7         1    87.50%

================================Branch Details================================

Branch Coverage for instance /RAM_top/golden

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File RAM_golden.v
------------------------------------IF Branch------------------------------------
    13                                      3036     Count coming in to IF
    13              1                         66             if (~rst_n) begin
    18              1                       2969             end else if (rx_valid) begin
                                               1     All False Count
Branch totals: 3 hits of 3 branches = 100.00%

------------------------------------CASE Branch------------------------------------
    19                                      2969     Count coming in to CASE
    20              1                        368                     2'b00: begin
    24              1                        188                     2'b01: begin
    28              1                       1758                     2'b10: begin
    32              1                        655                     2'b11: begin
    36              1                    ***0***                     default: begin
Branch totals: 4 hits of 5 branches = 80.00%


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      15        13         2    86.66%

================================Statement Details================================

Statement Coverage for instance /RAM_top/golden --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File RAM_golden.v
    1                                                module RAM_golden (clk, rst_n, din, rx_valid, dout, tx_valid);
    2                                                    parameter MEM_DEPTH = 256;
    3                                                    parameter ADDR_SIZE = 8;
    4                                                    input clk, rst_n, rx_valid;
    5                                                    input [ADDR_SIZE + 1 : 0] din;
    6                                                    output reg tx_valid;
    7                                                    output reg [ADDR_SIZE - 1 : 0] dout;
    8                                                    reg [ADDR_SIZE - 1 : 0] wr_address;
    9                                                    reg [ADDR_SIZE - 1 : 0] rd_address;
    10                                                   reg [ADDR_SIZE - 1 : 0] mem [MEM_DEPTH - 1 : 0];
    11                                                   
    12              1                       3036         always @(posedge clk) begin
    13                                                       if (~rst_n) begin
    14              1                         66                 tx_valid <= 0;
    15              1                         66                 dout <= 0;
    16              1                         66                 wr_address <= 0;
    17              1                         66                 rd_address <= 0;
    18                                                       end else if (rx_valid) begin
    19                                                           case (din[ADDR_SIZE + 1 : ADDR_SIZE])
    20                                                               2'b00: begin
    21              1                        368                         tx_valid <= 0;
    22              1                        368                         wr_address <= din[ADDR_SIZE - 1 : 0];
    23                                                               end
    24                                                               2'b01: begin
    25              1                        188                         tx_valid <= 0;
    26              1                        188                         mem[wr_address] <= din[ADDR_SIZE - 1 : 0];
    27                                                               end
    28                                                               2'b10: begin
    29              1                       1758                         tx_valid <= 0;
    30              1                       1758                         rd_address <= din[ADDR_SIZE - 1 : 0];
    31                                                               end
    32                                                               2'b11: begin
    33              1                        655                         tx_valid <= 1;
    34              1                        655                         dout <= mem[rd_address];
    35                                                               end
    36                                                               default: begin
    37              1                    ***0***                         tx_valid <= 0;
    38              1                    ***0***                         dout <= 0;

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         76        75         1    98.68%

================================Toggle Details================================

Toggle Coverage for instance /RAM_top/golden --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                               clk           1           1      100.00 
                                          din[0-9]           1           1      100.00 
                                         dout[7-0]           1           1      100.00 
                                   rd_address[7-0]           1           1      100.00 
                                             rst_n           1           1      100.00 
                                          rx_valid           0           1       50.00 
                                          tx_valid           1           1      100.00 
                                   wr_address[7-0]           1           1      100.00 

Total Node Count     =         38 
Toggled Node Count   =         37 
Untoggled Node Count =          1 

Toggle Coverage      =      98.68% (75 of 76 bins)

=================================================================================
=== Instance: /RAM_top
=== Design Unit: work.RAM_top
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       6         6         0   100.00%

================================Statement Details================================

Statement Coverage for instance /RAM_top --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File RAM_top.sv
    5                                                module RAM_top;
    6                                                    bit clk;
    7                                                    initial begin
    8               1                          1             clk = 0;
    9               1                          1             forever #5 clk = ~clk;
    9               2                       6093     
    9               3                       6092     
    10                                                   end
    11                                                   RAM_if vif(clk);
    12                                                   RAM dut (.din(vif.din),.clk(vif.clk),.rst_n(vif.rst_n),.rx_valid(vif.rx_valid),.dout(vif.dout),.tx_valid(vif.tx_valid));
    13                                                   RAM_golden golden (.clk(vif.clk), .rst_n(vif.rst_n),.din(vif.din),.rx_valid(vif.rx_valid),.dout(vif.dout_ref),.tx_valid(vif.tx_valid_ref) );
    14                                                   bind RAM RAM_assertions ram_assertions_inst (.clk(clk),.rst_n(rst_n),.rx_valid(rx_valid),.din(din),.dout(dout), .tx_valid(tx_valid));
    15                                               
    16                                                   initial begin
    17              1                          1             uvm_config_db#(virtual RAM_if)::set(null, "uvm_test_top", "RAM_IF", vif);
    18              1                          1             run_test("RAM_test");

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                          2         2         0   100.00%

================================Toggle Details================================

Toggle Coverage for instance /RAM_top --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                               clk           1           1      100.00 

Total Node Count     =          1 
Toggled Node Count   =          1 
Untoggled Node Count =          0 

Toggle Coverage      =     100.00% (2 of 2 bins)

=================================================================================
=== Instance: /RAM_pkg
=== Design Unit: work.RAM_pkg
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        10         2         8    20.00%

================================Branch Details================================

Branch Coverage for instance /RAM_pkg

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File RAM_seq_item.sv
------------------------------------IF Branch------------------------------------
    5                                    ***0***     Count coming in to IF
    5               1                    ***0***         `uvm_object_utils(RAM_sequence_item)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    5                                       3032     Count coming in to IF
    5               2                    ***0***         `uvm_object_utils(RAM_sequence_item)
                                            3032     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    5                                    ***0***     Count coming in to IF
    5               3                    ***0***         `uvm_object_utils(RAM_sequence_item)
    5               4                    ***0***         `uvm_object_utils(RAM_sequence_item)
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    5                                       3032     Count coming in to IF
    5               5                    ***0***         `uvm_object_utils(RAM_sequence_item)
                                            3032     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    5                                    ***0***     Count coming in to IF
    5               6                    ***0***         `uvm_object_utils(RAM_sequence_item)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       2         0         2     0.00%

================================Condition Details================================

Condition Coverage for instance /RAM_pkg --

  File RAM_seq_item.sv
----------------Focused Condition View-------------------
Line       5 Item    1  (name != 0)
Condition totals: 0 of 1 input term covered = 0.00%

   Input Term   Covered  Reason for no coverage   Hint
  -----------  --------  -----------------------  --------------
  (name != 0)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (name != 0)_0         -                             
  Row   2:    ***0***  (name != 0)_1         -                             

----------------Focused Condition View-------------------
Line       5 Item    2  (tmp_data__ != null)
Condition totals: 0 of 1 input term covered = 0.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (tmp_data__ != null)         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:          1  (tmp_data__ != null)_0  -                             
  Row   2:    ***0***  (tmp_data__ != null)_1  -                             


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      13         3        10    23.07%

================================Statement Details================================

Statement Coverage for instance /RAM_pkg --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File RAM_seq_item.sv
    1                                                package RAM_pkg;
    2                                                    import uvm_pkg::*;
    3                                                    `include "uvm_macros.svh"
    4                                                class RAM_sequence_item extends uvm_sequence_item;
    5               1                    ***0***         `uvm_object_utils(RAM_sequence_item)
    5               2                    ***0***     
    5               3                    ***0***     
    5               4                    ***0***     
    5               5                    ***0***     
    5               6                       3032     
    5               7                    ***0***     
    5               8                    ***0***     
    5               9                       3032     
    5              10                    ***0***     
    6                                                    rand bit rst_n;
    7                                                    rand bit rx_valid;
    8                                                    rand bit [9:0] din;
    9                                                    bit [7:0] dout;
    10                                                   bit tx_valid;
    11                                                   bit [7:0] dout_ref;
    12                                                   bit tx_valid_ref;
    13                                                   constraint rst_c {
    14                                                       rst_n dist {1 := 98, 0 := 2};
    15                                                   }
    16                                                   constraint rx_valid_c {
    17                                                       rx_valid dist {1 := 95, 0 := 5};
    18                                                   }
    19                                                 
    20                                                   constraint write_only_c {
    21                                                       if (rx_valid && (din[9:8] == 2'b10)) 
    22                                                           din[9:8] inside {2'b10, 2'b11}; 
    23                                                   }
    24                                                   constraint read_only_c {
    25                                                       if (rx_valid && (din[9:8] == 2'b00)) 
    26                                                           din[9:8] == 2'b01; 
    27                                                       if (rx_valid && (din[9:8] == 2'b01)) 
    28                                                           din[9:8] == 2'b00; 
    29                                                   }
    30                                                   constraint rw_c {
    31                                                       if (rx_valid && (din[9:8] == 2'b10))
    32                                                           din[9:8] inside {2'b10, 2'b11}; 
    33                                                       if (rx_valid && (din[9:8] == 2'b11))
    34                                                           din[9:8] dist {2'b00 := 60, 2'b10 := 40};
    35                                                       if (rx_valid && (din[9:8] == 2'b00))
    36                                                           din[9:8] == 2'b01; 
    37                                                       if (rx_valid && (din[9:8] == 2'b01))
    38                                                           din[9:8] dist {2'b10 := 60, 2'b00 := 40};
    39                                                   }
    40                                                   function new(string name = "RAM_sequence_item");
    41              1                       9112             super.new(name);
    42                                                   endfunction
    43                                                   function string convert2string();
    44              1                    ***0***             return $sformatf("rst_n=%0b, rx_valid=%0b, din=%0h, dout=%0h, tx_valid=%0b | REF: dout_ref=%0h, tx_valid_ref=%0b", 
    45                                                                      rst_n, rx_valid, din, dout, tx_valid, dout_ref, tx_valid_ref);
    46                                                   endfunction
    47                                                   function string convert2string_stimulus();
    48              1                    ***0***             return $sformatf("rst_n=%0b, rx_valid=%0b, din=%0h", rst_n, rx_valid, din);


=================================================================================
=== Instance: /RAM_coverage_pkg
=== Design Unit: work.RAM_coverage_pkg
=================================================================================

Covergroup Coverage:
    Covergroups                      1        na        na   100.00%
        Coverpoints/Crosses          8        na        na        na
            Covergroup Bins         16        16         0   100.00%
----------------------------------------------------------------------------------------------------------
Covergroup                                             Metric       Goal       Bins    Status               
                                                                                                         
----------------------------------------------------------------------------------------------------------
 TYPE /RAM_coverage_pkg/RAM_coverage/cvr_grp          100.00%        100          -    Covered              
    covered/total bins:                                    16         16          -                      
    missing/total bins:                                     0         16          -                      
    % Hit:                                            100.00%        100          -                      
    Coverpoint cp_din                                 100.00%        100          -    Covered              
        covered/total bins:                                 4          4          -                      
        missing/total bins:                                 0          4          -                      
        % Hit:                                        100.00%        100          -                      
    Coverpoint cp_rx_valid                            100.00%        100          -    Covered              
        covered/total bins:                                 2          2          -                      
        missing/total bins:                                 0          2          -                      
        % Hit:                                        100.00%        100          -                      
    Coverpoint cp_tx_valid                            100.00%        100          -    Covered              
        covered/total bins:                                 2          2          -                      
        missing/total bins:                                 0          2          -                      
        % Hit:                                        100.00%        100          -                      
    Coverpoint cp_write_sequence                      100.00%        100          -    Covered              
        covered/total bins:                                 1          1          -                      
        missing/total bins:                                 0          1          -                      
        % Hit:                                        100.00%        100          -                      
    Coverpoint cp_read_sequence                       100.00%        100          -    Covered              
        covered/total bins:                                 1          1          -                      
        missing/total bins:                                 0          1          -                      
        % Hit:                                        100.00%        100          -                      
    Coverpoint cp_full_sequence                       100.00%        100          -    Covered              
        covered/total bins:                                 1          1          -                      
        missing/total bins:                                 0          1          -                      
        % Hit:                                        100.00%        100          -                      
    Cross cross_din_rx_valid                          100.00%        100          -    Covered              
        covered/total bins:                                 4          4          -                      
        missing/total bins:                                 0          4          -                      
        % Hit:                                        100.00%        100          -                      
    Cross cross_read_tx_valid                         100.00%        100          -    Covered              
        covered/total bins:                                 1          1          -                      
        missing/total bins:                                 0          1          -                      
        % Hit:                                        100.00%        100          -                      
 Covergroup instance \/RAM_coverage_pkg::RAM_coverage::cvr_grp  
                                                      100.00%        100          -    Covered              
    covered/total bins:                                    16         16          -                      
    missing/total bins:                                     0         16          -                      
    % Hit:                                            100.00%        100          -                      
    Coverpoint cp_din                                 100.00%        100          -    Covered              
        covered/total bins:                                 4          4          -                      
        missing/total bins:                                 0          4          -                      
        % Hit:                                        100.00%        100          -                      
        bin write_address                                 380          1          -    Covered              
        bin write_data                                    190          1          -    Covered              
        bin read_address                                 1810          1          -    Covered              
        bin read_data                                     666          1          -    Covered              
    Coverpoint cp_rx_valid                            100.00%        100          -    Covered              
        covered/total bins:                                 2          2          -                      
        missing/total bins:                                 0          2          -                      
        % Hit:                                        100.00%        100          -                      
        bin high                                         3043          1          -    Covered              
        bin low                                             3          1          -    Covered              
    Coverpoint cp_tx_valid                            100.00%        100          -    Covered              
        covered/total bins:                                 2          2          -                      
        missing/total bins:                                 0          2          -                      
        % Hit:                                        100.00%        100          -                      
        bin high                                          655          1          -    Covered              
        bin low                                          2391          1          -    Covered              
    Coverpoint cp_write_sequence                      100.00%        100          -    Covered              
        covered/total bins:                                 1          1          -                      
        missing/total bins:                                 0          1          -                      
        % Hit:                                        100.00%        100          -                      
        bin write_add_to_write_data                       173          1          -    Covered              
    Coverpoint cp_read_sequence                       100.00%        100          -    Covered              
        covered/total bins:                                 1          1          -                      
        missing/total bins:                                 0          1          -                      
        % Hit:                                        100.00%        100          -                      
        bin read_add_to_read_data                         424          1          -    Covered              
    Coverpoint cp_full_sequence                       100.00%        100          -    Covered              
        covered/total bins:                                 1          1          -                      
        missing/total bins:                                 0          1          -                      
        % Hit:                                        100.00%        100          -                      
        bin full_wr_rd                                     43          1          -    Covered              
    Cross cross_din_rx_valid                          100.00%        100          -    Covered              
        covered/total bins:                                 4          4          -                      
        missing/total bins:                                 0          4          -                      
        % Hit:                                        100.00%        100          -                      
        Auto, Default and User Defined Bins:
            bin <read_data,high>                          666          1          -    Covered              
            bin <write_data,high>                         190          1          -    Covered              
            bin <read_address,high>                      1810          1          -    Covered              
            bin <write_address,high>                      377          1          -    Covered              
        Illegal and Ignore Bins:
            ignore_bin ignore_rx_low                        3                     -    Occurred             
    Cross cross_read_tx_valid                         100.00%        100          -    Covered              
        covered/total bins:                                 1          1          -                      
        missing/total bins:                                 0          1          -                      
        % Hit:                                        100.00%        100          -                      
        Auto, Default and User Defined Bins:
            bin read_with_tx                              655          1          -    Covered              
        Illegal and Ignore Bins:
            ignore_bin ignore_others                     2391                     -    Occurred             
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      14        12         2    85.71%

================================Statement Details================================

Statement Coverage for instance /RAM_coverage_pkg --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File RAM_coverage.sv
    1                                                package RAM_coverage_pkg ;
    2                                                import uvm_pkg::*;
    3                                                import RAM_pkg::*;
    4                                                `include "uvm_macros.svh"
    5                                                class RAM_coverage extends uvm_component;
    6               1                    ***0***         `uvm_component_utils(RAM_coverage)
    6               2                    ***0***     
    6               3                          2     
    7                                                
    8                                                    uvm_analysis_export #(RAM_sequence_item) cov_export;
    9                                                    uvm_tlm_analysis_fifo #(RAM_sequence_item) cov_fifo;
    10                                                   RAM_sequence_item seq_item;
    11                                               
    12                                                   covergroup cvr_grp;
    13                                                       cp_din: coverpoint seq_item.din[9:8] {
    14                                                           bins write_address = {2'b00};
    15                                                           bins write_data = {2'b01};
    16                                                           bins read_address = {2'b10};
    17                                                           bins read_data = {2'b11};
    18                                                       }
    19                                                       cp_rx_valid: coverpoint seq_item.rx_valid {
    20                                                           bins high = {1};
    21                                                           bins low = {0};
    22                                                       }
    23                                                       cp_tx_valid: coverpoint seq_item.tx_valid {
    24                                                           bins high = {1};
    25                                                           bins low = {0};
    26                                                       }
    27                                               
    28                                                       cp_write_sequence: coverpoint seq_item.din[9:8] {
    29                                                           bins write_add_to_write_data = (2'b00 => 2'b01);
    30                                                       }
    31                                                       cp_read_sequence: coverpoint seq_item.din[9:8] {
    32                                                           bins read_add_to_read_data = (2'b10 => 2'b11);
    33                                                       }
    34                                               
    35                                                       cp_full_sequence: coverpoint seq_item.din[9:8] {
    36                                                           bins full_wr_rd = (2'b00 => 2'b01 => 2'b10 => 2'b11);
    37                                                       }
    38                                               
    39                                                       cross_din_rx_valid: cross cp_din, cp_rx_valid {
    40                                                           ignore_bins ignore_rx_low = binsof(cp_rx_valid.low);
    41                                                       }
    42                                                       cross_read_tx_valid: cross cp_din, cp_tx_valid {
    43                                                           bins read_with_tx = binsof(cp_din.read_data) && binsof(cp_tx_valid.high);
    44                                                           ignore_bins ignore_others = binsof(cp_din.write_address) ||  binsof(cp_din.write_data) ||  binsof(cp_din.read_address) ||binsof(cp_tx_valid.low);
    45                                                       }
    46                                                   endgroup
    47                                               
    48                                                   function new(string name = "RAM_coverage", uvm_component parent = null);
    49              1                          1             super.new(name, parent);
    50              1                          1             cvr_grp = new();
    51                                                   endfunction
    52                                               
    53                                                   function void build_phase(uvm_phase phase);
    54              1                          1             super.build_phase(phase);
    55                                               
    56              1                          1             cov_export = new("cov_export", this);
    57              1                          1             cov_fifo = new("cov_fifo", this);
    58                                                   endfunction
    59                                               
    60                                                   function void connect_phase(uvm_phase phase);
    61              1                          1             super.connect_phase(phase);
    62                                               
    63              1                          1             cov_export.connect(cov_fifo.analysis_export);
    64                                                   endfunction
    65                                               
    66                                                   task run_phase(uvm_phase phase);
    67              1                          1             super.run_phase(phase);
    68                                               
    69              1                          1             forever begin
    70              1                       3047                 cov_fifo.get(seq_item);
    71              1                       3046                 cvr_grp.sample();


=================================================================================
=== Instance: /RAM_scoreboard_pkg
=== Design Unit: work.RAM_scoreboard_pkg
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        16         6        10    37.50%

================================Branch Details================================

Branch Coverage for instance /RAM_scoreboard_pkg

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File RAM_scoreboard.sv
------------------------------------IF Branch------------------------------------
    32                                      3046     Count coming in to IF
    32              1                       3046             if (seq_item.tx_valid == seq_item.tx_valid_ref && seq_item.dout == seq_item.dout_ref) begin
    36              1                    ***0***             end else begin
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    34                                      3046     Count coming in to IF
    34              1                    ***0***                 `uvm_info(get_type_name(), $sformatf("correct: DUT(dout=%0h, tx_valid=%0b) and REF(dout=%0h, tx_valid=%0b)", 
                                            3046     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    38                                   ***0***     Count coming in to IF
    38              1                    ***0***                 `uvm_error(get_type_name(), $sformatf("eror: DUT(dout=%0h, tx_valid=%0b) and REF(dout=%0h, tx_valid=%0b)", 
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    44                                         1     Count coming in to IF
    44              1                          1             `uvm_info(get_type_name(), $sformatf(" correct transactions: %0d", correct_count), UVM_LOW)
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    45                                         1     Count coming in to IF
    45              1                          1             `uvm_info(get_type_name(), $sformatf(" errors: %0d", error_count), UVM_LOW)
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    46                                         1     Count coming in to IF
    46              1                          1             if(error_count == 0)
    48              1                    ***0***             else
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    47                                         1     Count coming in to IF
    47              1                          1                 `uvm_info(get_type_name(), $sformatf(" No Errors Detected!"), UVM_LOW)
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    49                                   ***0***     Count coming in to IF
    49              1                    ***0***                 `uvm_error(get_type_name(), $sformatf(" %0d Errors Detected!", error_count)) 
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       3         0         3     0.00%

================================Condition Details================================

Condition Coverage for instance /RAM_scoreboard_pkg --

  File RAM_scoreboard.sv
----------------Focused Condition View-------------------
Line       32 Item    1  ((seq_item.tx_valid == seq_item.tx_valid_ref) && (seq_item.dout == seq_item.dout_ref))
Condition totals: 0 of 2 input terms covered = 0.00%

                                    Input Term   Covered  Reason for no coverage   Hint
                                   -----------  --------  -----------------------  --------------
  (seq_item.tx_valid == seq_item.tx_valid_ref)         N  '_0' not hit             Hit '_0'
          (seq_item.dout == seq_item.dout_ref)         N  '_0' not hit             Hit '_0'

     Rows:       Hits  FEC Target                                      Non-masking condition(s)      
 ---------  ---------  --------------------                            -------------------------     
  Row   1:    ***0***  (seq_item.tx_valid == seq_item.tx_valid_ref)_0  -                             
  Row   2:          1  (seq_item.tx_valid == seq_item.tx_valid_ref)_1  (seq_item.dout == seq_item.dout_ref)
  Row   3:    ***0***  (seq_item.dout == seq_item.dout_ref)_0          (seq_item.tx_valid == seq_item.tx_valid_ref)
  Row   4:          1  (seq_item.dout == seq_item.dout_ref)_1          (seq_item.tx_valid == seq_item.tx_valid_ref)

----------------Focused Condition View-------------------
Line       46 Item    1  (this.error_count == 0)
Condition totals: 0 of 1 input term covered = 0.00%

               Input Term   Covered  Reason for no coverage   Hint
              -----------  --------  -----------------------  --------------
  (this.error_count == 0)         N  '_0' not hit             Hit '_0'

     Rows:       Hits  FEC Target                 Non-masking condition(s)      
 ---------  ---------  --------------------       -------------------------     
  Row   1:    ***0***  (this.error_count == 0)_0  -                             
  Row   2:          1  (this.error_count == 0)_1  -                             


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      24        18         6    75.00%

================================Statement Details================================

Statement Coverage for instance /RAM_scoreboard_pkg --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File RAM_scoreboard.sv
    1                                                package RAM_scoreboard_pkg;
    2                                                import uvm_pkg::*;
    3                                                import RAM_pkg::*;
    4                                                `include "uvm_macros.svh"
    5                                                class RAM_scoreboard extends uvm_scoreboard;
    6               1                    ***0***         `uvm_component_utils(RAM_scoreboard)
    6               2                    ***0***     
    6               3                       3054     
    7                                                    uvm_analysis_export #(RAM_sequence_item) sb_export;
    8                                                    uvm_tlm_analysis_fifo #(RAM_sequence_item) sb_fifo;
    9                                                    RAM_sequence_item seq_item;
    10              1                          1         int correct_count = 0;
    11              1                          1         int error_count = 0;
    12                                                   function new(string name = "RAM_scoreboard", uvm_component parent = null);
    13              1                          1             super.new(name, parent);
    14                                                   endfunction
    15                                                   function void build_phase(uvm_phase phase);
    16              1                          1             super.build_phase(phase);
    17              1                          1             sb_export = new("sb_export", this);
    18              1                          1             sb_fifo = new("sb_fifo", this);
    19                                                   endfunction
    20                                                   function void connect_phase(uvm_phase phase);
    21              1                          1             super.connect_phase(phase);
    22              1                          1             sb_export.connect(sb_fifo.analysis_export);
    23                                                   endfunction
    24                                                   task run_phase(uvm_phase phase);
    25              1                          1             super.run_phase(phase);
    26              1                          1             forever begin
    27              1                       3047                 sb_fifo.get(seq_item);
    28              1                       3046                 compare(seq_item);
    29                                                       end
    30                                                   endtask
    31                                                   task compare(RAM_sequence_item seq_item);
    32                                                       if (seq_item.tx_valid == seq_item.tx_valid_ref && seq_item.dout == seq_item.dout_ref) begin
    33              1                       3046                 correct_count++;
    34              1                    ***0***                 `uvm_info(get_type_name(), $sformatf("correct: DUT(dout=%0h, tx_valid=%0b) and REF(dout=%0h, tx_valid=%0b)", 
    35                                                                    seq_item.dout, seq_item.tx_valid, seq_item.dout_ref, seq_item.tx_valid_ref), UVM_HIGH)
    36                                                       end else begin
    37              1                    ***0***                 error_count++;
    38              1                    ***0***                 `uvm_error(get_type_name(), $sformatf("eror: DUT(dout=%0h, tx_valid=%0b) and REF(dout=%0h, tx_valid=%0b)", 
    39                                                                     seq_item.dout, seq_item.tx_valid, seq_item.dout_ref, seq_item.tx_valid_ref))
    40                                                       end
    41                                                   endtask
    42                                                   function void report_phase(uvm_phase phase);
    43              1                          1             super.report_phase(phase);
    44              1                          1             `uvm_info(get_type_name(), $sformatf(" correct transactions: %0d", correct_count), UVM_LOW)
    45              1                          1             `uvm_info(get_type_name(), $sformatf(" errors: %0d", error_count), UVM_LOW)
    46                                                       if(error_count == 0)
    47              1                          1                 `uvm_info(get_type_name(), $sformatf(" No Errors Detected!"), UVM_LOW)
    48                                                       else
    49              1                    ***0***                 `uvm_error(get_type_name(), $sformatf(" %0d Errors Detected!", error_count)) 


=================================================================================
=== Instance: /RAM_config_obj_pkg
=== Design Unit: work.RAM_config_obj_pkg
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        10         0        10     0.00%

================================Branch Details================================

Branch Coverage for instance /RAM_config_obj_pkg

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File RAM_config_obj_pkg.sv
------------------------------------IF Branch------------------------------------
    5                                    ***0***     Count coming in to IF
    5               1                    ***0***       `uvm_object_utils(RAM_config_obj)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    5                                    ***0***     Count coming in to IF
    5               2                    ***0***       `uvm_object_utils(RAM_config_obj)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    5                                    ***0***     Count coming in to IF
    5               3                    ***0***       `uvm_object_utils(RAM_config_obj)
    5               4                    ***0***       `uvm_object_utils(RAM_config_obj)
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    5                                    ***0***     Count coming in to IF
    5               5                    ***0***       `uvm_object_utils(RAM_config_obj)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    5                                    ***0***     Count coming in to IF
    5               6                    ***0***       `uvm_object_utils(RAM_config_obj)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       2         0         2     0.00%

================================Condition Details================================

Condition Coverage for instance /RAM_config_obj_pkg --

  File RAM_config_obj_pkg.sv
----------------Focused Condition View-------------------
Line       5 Item    1  (name != 0)
Condition totals: 0 of 1 input term covered = 0.00%

   Input Term   Covered  Reason for no coverage   Hint
  -----------  --------  -----------------------  --------------
  (name != 0)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (name != 0)_0         -                             
  Row   2:    ***0***  (name != 0)_1         -                             

----------------Focused Condition View-------------------
Line       5 Item    2  (tmp_data__ != null)
Condition totals: 0 of 1 input term covered = 0.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (tmp_data__ != null)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:    ***0***  (tmp_data__ != null)_0  -                             
  Row   2:    ***0***  (tmp_data__ != null)_1  -                             


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      11         1        10     9.09%

================================Statement Details================================

Statement Coverage for instance /RAM_config_obj_pkg --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File RAM_config_obj_pkg.sv
    1                                                package RAM_config_obj_pkg;
    2                                                import uvm_pkg::*;
    3                                                `include "uvm_macros.svh"
    4                                                class RAM_config_obj extends uvm_object;
    5               1                    ***0***       `uvm_object_utils(RAM_config_obj)
    5               2                    ***0***     
    5               3                    ***0***     
    5               4                    ***0***     
    5               5                    ***0***     
    5               6                    ***0***     
    5               7                    ***0***     
    5               8                    ***0***     
    5               9                    ***0***     
    5              10                    ***0***     
    6                                                  virtual RAM_if vif;
    7                                                  uvm_active_passive_enum is_active ;  
    8                                                
    9                                                  function new(string name="RAM_config_obj");
    10              1                          1         super.new(name);


=================================================================================
=== Instance: /RAM_monitor_pkg
=== Design Unit: work.RAM_monitor_pkg
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                         2         1         1    50.00%

================================Branch Details================================

Branch Coverage for instance /RAM_monitor_pkg

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File RAM_monitor.sv
------------------------------------IF Branch------------------------------------
    31                                      3046     Count coming in to IF
    31              1                    ***0***                 `uvm_info(get_type_name(), seq_item.convert2string(), UVM_HIGH)
                                            3046     All False Count
Branch totals: 1 hit of 2 branches = 50.00%


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      19        16         3    84.21%

================================Statement Details================================

Statement Coverage for instance /RAM_monitor_pkg --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File RAM_monitor.sv
    1                                                package RAM_monitor_pkg;
    2                                                import uvm_pkg::*;
    3                                                import RAM_pkg::*;
    4                                                `include "uvm_macros.svh" 
    5                                                class RAM_monitor extends uvm_monitor;
    6               1                    ***0***         `uvm_component_utils(RAM_monitor)
    6               2                    ***0***     
    6               3                       3048     
    7                                                    virtual RAM_if vif;
    8                                                    RAM_sequence_item seq_item;
    9                                                    uvm_analysis_port #(RAM_sequence_item) mon_ap;
    10                                                   function new(string name = "RAM_monitor", uvm_component parent = null);
    11              1                          1             super.new(name, parent);
    12                                                   endfunction
    13                                                   function void build_phase(uvm_phase phase);
    14              1                          1             super.build_phase(phase);
    15                                                       
    16              1                          1             mon_ap = new("mon_ap", this);
    17                                                   endfunction
    18                                                   task run_phase(uvm_phase phase);
    19              1                          1             super.run_phase(phase);
    20              1                          1             forever begin
    21              1                       3047                 seq_item = RAM_sequence_item::type_id::create("seq_item");
    22              1                       3047                 @(negedge vif.clk);
    23              1                       3046                 seq_item.rst_n = vif.rst_n;
    24              1                       3046                 seq_item.rx_valid = vif.rx_valid;
    25              1                       3046                 seq_item.din = vif.din;
    26              1                       3046                 seq_item.dout = vif.dout;
    27              1                       3046                 seq_item.tx_valid = vif.tx_valid;
    28              1                       3046                 seq_item.dout_ref = vif.dout_ref;
    29              1                       3046                 seq_item.tx_valid_ref = vif.tx_valid_ref;
    30              1                       3046                 mon_ap.write(seq_item);
    31              1                    ***0***                 `uvm_info(get_type_name(), seq_item.convert2string(), UVM_HIGH)


=================================================================================
=== Instance: /RAM_driver_pkg
=== Design Unit: work.RAM_driver_pkg
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                         2         1         1    50.00%

================================Branch Details================================

Branch Coverage for instance /RAM_driver_pkg

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File RAM_driver.sv
------------------------------------IF Branch------------------------------------
    27                                      3032     Count coming in to IF
    27              1                    ***0***                 `uvm_info(get_type_name(), seq_item.convert2string_stimulus(), UVM_HIGH)
                                            3032     All False Count
Branch totals: 1 hit of 2 branches = 50.00%


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      14        11         3    78.57%

================================Statement Details================================

Statement Coverage for instance /RAM_driver_pkg --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File RAM_driver.sv
    1                                                package RAM_driver_pkg ;
    2                                                    import uvm_pkg::*;
    3                                                    import RAM_pkg::*;
    4                                                    `include "uvm_macros.svh"
    5                                                class RAM_driver extends uvm_driver #(RAM_sequence_item);
    6               1                    ***0***         `uvm_component_utils(RAM_driver)
    6               2                    ***0***     
    6               3                       3034     
    7                                                
    8                                                    virtual RAM_if vif;
    9                                                    RAM_sequence_item seq_item;
    10                                               
    11                                                   function new(string name = "RAM_driver", uvm_component parent = null);
    12              1                          1             super.new(name, parent);
    13                                                   endfunction
    14                                               
    15                                                   task run_phase(uvm_phase phase);
    16              1                          1             super.run_phase(phase);
    17              1                          1             forever begin
    18              1                       3033                 seq_item = RAM_sequence_item::type_id::create("seq_item");
    19              1                       3033                 seq_item_port.get_next_item(seq_item);
    20                                                           
    21              1                       3032                 vif.rst_n = seq_item.rst_n;
    22              1                       3032                 vif.rx_valid = seq_item.rx_valid;
    23              1                       3032                 vif.din = seq_item.din;
    24                                                           
    25              1                       3032                 @(negedge vif.clk);
    26              1                       3032                 seq_item_port.item_done();
    27              1                    ***0***                 `uvm_info(get_type_name(), seq_item.convert2string_stimulus(), UVM_HIGH)


=================================================================================
=== Instance: /RAM_sequencer_pkg
=== Design Unit: work.RAM_sequencer_pkg
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       4         2         2    50.00%

================================Statement Details================================

Statement Coverage for instance /RAM_sequencer_pkg --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File RAM_sequencer.sv
    1                                                package RAM_sequencer_pkg;
    2                                                    import uvm_pkg::*;
    3                                                    import RAM_pkg::*;
    4                                                    `include "uvm_macros.svh"
    5                                                class RAM_sequencer extends uvm_sequencer #(RAM_sequence_item);
    6               1                    ***0***         `uvm_component_utils(RAM_sequencer)
    6               2                    ***0***     
    6               3                          2     
    7                                                
    8                                                    function new(string name = "RAM_sequencer", uvm_component parent = null);
    9               1                          1             super.new(name, parent);


=================================================================================
=== Instance: /RAM_agent_pkg
=== Design Unit: work.RAM_agent_pkg
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                         8         3         5    37.50%

================================Branch Details================================

Branch Coverage for instance /RAM_agent_pkg

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File RAM_agent.sv
------------------------------------IF Branch------------------------------------
    25                                         1     Count coming in to IF
    25              1                    ***0***             if (!uvm_config_db #(RAM_config_obj)::get(this, "", "RAM_config_obj", cfg))
                                               1     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    26                                   ***0***     Count coming in to IF
    26              1                    ***0***                     `uvm_fatal("build_phase", "unable to get config object");
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    28                                         1     Count coming in to IF
    28              1                          1             if(cfg.is_active == UVM_ACTIVE) begin
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    40                                         1     Count coming in to IF
    40              1                          1             if(cfg.is_active == UVM_ACTIVE) begin
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      15        12         3    80.00%

================================Statement Details================================

Statement Coverage for instance /RAM_agent_pkg --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File RAM_agent.sv
    1                                                package RAM_agent_pkg ;
    2                                                    import uvm_pkg::*;
    3                                                    import RAM_sequencer_pkg::*;
    4                                                    import RAM_driver_pkg::*;
    5                                                    import RAM_pkg::*;
    6                                                    import RAM_monitor_pkg::*;
    7                                                    import RAM_config_obj_pkg::*;
    8                                                    `include "uvm_macros.svh"
    9                                                class RAM_agent extends uvm_agent;
    10              1                    ***0***         `uvm_component_utils(RAM_agent)
    10              2                    ***0***     
    10              3                          2     
    11                                               
    12                                                   RAM_driver drv;
    13                                                   RAM_sequencer sqr;
    14                                                   RAM_monitor mon;
    15                                                   RAM_config_obj cfg;
    16                                                   uvm_analysis_port #(RAM_sequence_item) agent_ap;
    17                                               
    18                                                   function new(string name = "RAM_agent", uvm_component parent = null);
    19              1                          1             super.new(name, parent);
    20                                                   endfunction
    21                                               
    22                                                   function void build_phase(uvm_phase phase);
    23              1                          1             super.build_phase(phase);
    24                                               
    25                                                       if (!uvm_config_db #(RAM_config_obj)::get(this, "", "RAM_config_obj", cfg))
    26              1                    ***0***                     `uvm_fatal("build_phase", "unable to get config object");
    27                                               
    28                                                       if(cfg.is_active == UVM_ACTIVE) begin
    29              1                          1                 drv = RAM_driver::type_id::create("drv", this);
    30              1                          1                 sqr = RAM_sequencer::type_id::create("sqr", this);
    31                                                       end
    32                                               
    33              1                          1             agent_ap = new("agent_ap", this);
    34              1                          1             mon = RAM_monitor::type_id::create("mon", this);
    35                                                   endfunction
    36                                               
    37                                                   function void connect_phase(uvm_phase phase);
    38              1                          1             super.connect_phase(phase);
    39                                               
    40                                                       if(cfg.is_active == UVM_ACTIVE) begin
    41              1                          1                 drv.vif = cfg.vif;
    42              1                          1                 drv.seq_item_port.connect(sqr.seq_item_export);
    43                                                       end
    44                                               
    45              1                          1             mon.vif = cfg.vif;
    46              1                          1             mon.mon_ap.connect(agent_ap);


=================================================================================
=== Instance: /RAM_env_pkg
=== Design Unit: work.RAM_env_pkg
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      11         9         2    81.81%

================================Statement Details================================

Statement Coverage for instance /RAM_env_pkg --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File RAM_env.sv
    1                                                package RAM_env_pkg;
    2                                                import uvm_pkg::*;
    3                                                import RAM_agent_pkg::*;
    4                                                import RAM_scoreboard_pkg::*;
    5                                                import RAM_coverage_pkg::*;
    6                                                `include "uvm_macros.svh"
    7                                                class RAM_env extends uvm_env;
    8               1                    ***0***         `uvm_component_utils(RAM_env)
    8               2                    ***0***     
    8               3                          2     
    9                                                    RAM_agent agt;
    10                                                   RAM_scoreboard sb;
    11                                                   RAM_coverage cov;
    12                                                   function new(string name = "RAM_env", uvm_component parent = null);
    13              1                          1             super.new(name, parent);
    14                                                   endfunction
    15                                               
    16                                                   function void build_phase(uvm_phase phase);
    17              1                          1             super.build_phase(phase);
    18              1                          1             agt = RAM_agent::type_id::create("agt", this);
    19              1                          1             sb = RAM_scoreboard::type_id::create("sb", this);
    20              1                          1             cov = RAM_coverage::type_id::create("cov", this);
    21                                                   endfunction
    22                                               
    23                                                   function void connect_phase(uvm_phase phase);
    24              1                          1             super.connect_phase(phase);
    25              1                          1             agt.agent_ap.connect(sb.sb_export);
    26              1                          1             agt.agent_ap.connect(cov.cov_export);


=================================================================================
=== Instance: /RAM_sequence_pkg
=== Design Unit: work.RAM_sequence_pkg
=================================================================================

Assertion Coverage:
    Assertions                       4         4         0   100.00%
--------------------------------------------------------------------
Name                 File(Line)                   Failure      Pass 
                                                  Count        Count
--------------------------------------------------------------------
/RAM_sequence_pkg/write_only_sequence/body/#ublk#33852551#44/immed__47
                     RAM_sequence.sv(47)                0          1
/RAM_sequence_pkg/read_only_sequence/body/#ublk#33852551#80/immed__83
                     RAM_sequence.sv(83)                0          1
/RAM_sequence_pkg/write_read_sequence/body/#ublk#33852551#116/immed__119
                     RAM_sequence.sv(119)               0          1
/RAM_sequence_pkg/main_sequence/body/#ublk#33852551#154/immed__157
                     RAM_sequence.sv(157)               0          1
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        77        34        43    44.15%

================================Branch Details================================

Branch Coverage for instance /RAM_sequence_pkg

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File RAM_sequence.sv
------------------------------------IF Branch------------------------------------
    6                                    ***0***     Count coming in to IF
    6               1                    ***0***         `uvm_object_utils(reset_sequence)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    6                                          1     Count coming in to IF
    6               2                    ***0***         `uvm_object_utils(reset_sequence)
                                               1     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    6                                    ***0***     Count coming in to IF
    6               3                    ***0***         `uvm_object_utils(reset_sequence)
    6               4                    ***0***         `uvm_object_utils(reset_sequence)
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    6                                          1     Count coming in to IF
    6               5                    ***0***         `uvm_object_utils(reset_sequence)
                                               1     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    6                                    ***0***     Count coming in to IF
    6               6                    ***0***         `uvm_object_utils(reset_sequence)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    34                                   ***0***     Count coming in to IF
    34              1                    ***0***         `uvm_object_utils(write_only_sequence)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    34                                         1     Count coming in to IF
    34              2                    ***0***         `uvm_object_utils(write_only_sequence)
                                               1     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    34                                   ***0***     Count coming in to IF
    34              3                    ***0***         `uvm_object_utils(write_only_sequence)
    34              4                    ***0***         `uvm_object_utils(write_only_sequence)
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    34                                         1     Count coming in to IF
    34              5                    ***0***         `uvm_object_utils(write_only_sequence)
                                               1     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    34                                   ***0***     Count coming in to IF
    34              6                    ***0***         `uvm_object_utils(write_only_sequence)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------CASE Branch------------------------------------
    50                                        30     Count coming in to CASE
    51              1                         14                     2'b00: begin
    54              1                         16                     2'b01: begin
    57              1                    ***0***                     default: begin
Branch totals: 2 hits of 3 branches = 66.66%

------------------------------------IF Branch------------------------------------
    52                                        14     Count coming in to IF
    52              1                          4                         seq_item.din[9:8] = $urandom_range(0,1) ? 2'b00 : 2'b01;
    52              2                         10                         seq_item.din[9:8] = $urandom_range(0,1) ? 2'b00 : 2'b01;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    55                                        16     Count coming in to IF
    55              1                          9                         seq_item.din[9:8] = $urandom_range(0,1) ? 2'b00 : 2'b01;
    55              2                          7                         seq_item.din[9:8] = $urandom_range(0,1) ? 2'b00 : 2'b01;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    70                                   ***0***     Count coming in to IF
    70              1                    ***0***         `uvm_object_utils(read_only_sequence)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    70                                         1     Count coming in to IF
    70              2                    ***0***         `uvm_object_utils(read_only_sequence)
                                               1     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    70                                   ***0***     Count coming in to IF
    70              3                    ***0***         `uvm_object_utils(read_only_sequence)
    70              4                    ***0***         `uvm_object_utils(read_only_sequence)
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    70                                         1     Count coming in to IF
    70              5                    ***0***         `uvm_object_utils(read_only_sequence)
                                               1     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    70                                   ***0***     Count coming in to IF
    70              6                    ***0***         `uvm_object_utils(read_only_sequence)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------CASE Branch------------------------------------
    86                                      1000     Count coming in to CASE
    87              1                        504                     2'b10: begin
    90              1                        496                     2'b11: begin
    93              1                    ***0***                     default: begin
Branch totals: 2 hits of 3 branches = 66.66%

------------------------------------IF Branch------------------------------------
    88                                       504     Count coming in to IF
    88              1                        247                         seq_item.din[9:8] = $urandom_range(0,1) ? 2'b10 : 2'b11;
    88              2                        257                         seq_item.din[9:8] = $urandom_range(0,1) ? 2'b10 : 2'b11;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    91                                       496     Count coming in to IF
    91              1                        256                         seq_item.din[9:8] = $urandom_range(0,1) ? 2'b10 : 2'b11;
    91              2                        240                         seq_item.din[9:8] = $urandom_range(0,1) ? 2'b10 : 2'b11;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    106                                  ***0***     Count coming in to IF
    106             1                    ***0***         `uvm_object_utils(write_read_sequence)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    106                                        1     Count coming in to IF
    106             2                    ***0***         `uvm_object_utils(write_read_sequence)
                                               1     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    106                                  ***0***     Count coming in to IF
    106             3                    ***0***         `uvm_object_utils(write_read_sequence)
    106             4                    ***0***         `uvm_object_utils(write_read_sequence)
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    106                                        1     Count coming in to IF
    106             5                    ***0***         `uvm_object_utils(write_read_sequence)
                                               1     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    106                                  ***0***     Count coming in to IF
    106             6                    ***0***         `uvm_object_utils(write_read_sequence)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------CASE Branch------------------------------------
    122                                     1000     Count coming in to CASE
    123             1                        350                     2'b00: begin
    126             1                        164                     2'b01: begin
    129             1                        328                     2'b10: begin
    132             1                        158                     2'b11: begin
                                         ***0***     All False Count
Branch totals: 4 hits of 5 branches = 80.00%

------------------------------------IF Branch------------------------------------
    124                                      350     Count coming in to IF
    124             1                        186                         seq_item.din[9:8] = $urandom_range(0,1) ? 2'b00 : 2'b01;
    124             2                        164                         seq_item.din[9:8] = $urandom_range(0,1) ? 2'b00 : 2'b01;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    127                                      164     Count coming in to IF
    127             1                        101                         seq_item.din[9:8] = ($urandom_range(1,100) <= 60) ? 2'b10 : 2'b00;
    127             2                         63                         seq_item.din[9:8] = ($urandom_range(1,100) <= 60) ? 2'b10 : 2'b00;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    130                                      328     Count coming in to IF
    130             1                        170                         seq_item.din[9:8] = $urandom_range(0,1) ? 2'b10 : 2'b11;
    130             2                        158                         seq_item.din[9:8] = $urandom_range(0,1) ? 2'b10 : 2'b11;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    133                                      158     Count coming in to IF
    133             1                        101                         seq_item.din[9:8] = ($urandom_range(1,100) <= 60) ? 2'b00 : 2'b10;
    133             2                         57                         seq_item.din[9:8] = ($urandom_range(1,100) <= 60) ? 2'b00 : 2'b10;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    145                                  ***0***     Count coming in to IF
    145             1                    ***0***         `uvm_object_utils(main_sequence)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    145                                        1     Count coming in to IF
    145             2                    ***0***         `uvm_object_utils(main_sequence)
                                               1     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    145                                  ***0***     Count coming in to IF
    145             3                    ***0***         `uvm_object_utils(main_sequence)
    145             4                    ***0***         `uvm_object_utils(main_sequence)
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    145                                        1     Count coming in to IF
    145             5                    ***0***         `uvm_object_utils(main_sequence)
                                               1     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    145                                  ***0***     Count coming in to IF
    145             6                    ***0***         `uvm_object_utils(main_sequence)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                      12         2        10    16.66%

================================Condition Details================================

Condition Coverage for instance /RAM_sequence_pkg --

  File RAM_sequence.sv
----------------Focused Condition View-------------------
Line       6 Item    1  (name != 0)
Condition totals: 0 of 1 input term covered = 0.00%

   Input Term   Covered  Reason for no coverage   Hint
  -----------  --------  -----------------------  --------------
  (name != 0)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (name != 0)_0         -                             
  Row   2:    ***0***  (name != 0)_1         -                             

----------------Focused Condition View-------------------
Line       6 Item    2  (tmp_data__ != null)
Condition totals: 0 of 1 input term covered = 0.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (tmp_data__ != null)         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:          1  (tmp_data__ != null)_0  -                             
  Row   2:    ***0***  (tmp_data__ != null)_1  -                             

----------------Focused Condition View-------------------
Line       34 Item    1  (name != 0)
Condition totals: 0 of 1 input term covered = 0.00%

   Input Term   Covered  Reason for no coverage   Hint
  -----------  --------  -----------------------  --------------
  (name != 0)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (name != 0)_0         -                             
  Row   2:    ***0***  (name != 0)_1         -                             

----------------Focused Condition View-------------------
Line       34 Item    2  (tmp_data__ != null)
Condition totals: 0 of 1 input term covered = 0.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (tmp_data__ != null)         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:          1  (tmp_data__ != null)_0  -                             
  Row   2:    ***0***  (tmp_data__ != null)_1  -                             

----------------Focused Condition View-------------------
Line       70 Item    1  (name != 0)
Condition totals: 0 of 1 input term covered = 0.00%

   Input Term   Covered  Reason for no coverage   Hint
  -----------  --------  -----------------------  --------------
  (name != 0)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (name != 0)_0         -                             
  Row   2:    ***0***  (name != 0)_1         -                             

----------------Focused Condition View-------------------
Line       70 Item    2  (tmp_data__ != null)
Condition totals: 0 of 1 input term covered = 0.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (tmp_data__ != null)         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:          1  (tmp_data__ != null)_0  -                             
  Row   2:    ***0***  (tmp_data__ != null)_1  -                             

----------------Focused Condition View-------------------
Line       106 Item    1  (name != 0)
Condition totals: 0 of 1 input term covered = 0.00%

   Input Term   Covered  Reason for no coverage   Hint
  -----------  --------  -----------------------  --------------
  (name != 0)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (name != 0)_0         -                             
  Row   2:    ***0***  (name != 0)_1         -                             

----------------Focused Condition View-------------------
Line       106 Item    2  (tmp_data__ != null)
Condition totals: 0 of 1 input term covered = 0.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (tmp_data__ != null)         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:          1  (tmp_data__ != null)_0  -                             
  Row   2:    ***0***  (tmp_data__ != null)_1  -                             

----------------Focused Condition View-------------------
Line       127 Item    1  ($urandom_range(1,100) <= 60)
Condition totals: 1 of 1 input term covered = 100.00%

                     Input Term   Covered  Reason for no coverage   Hint
                    -----------  --------  -----------------------  --------------
  ($urandom_range(1,100) <= 60)         Y

     Rows:       Hits  FEC Target                       Non-masking condition(s)      
 ---------  ---------  --------------------             -------------------------     
  Row   1:          1  ($urandom_range(1,100) <= 60)_0  -                             
  Row   2:          1  ($urandom_range(1,100) <= 60)_1  -                             

----------------Focused Condition View-------------------
Line       133 Item    1  ($urandom_range(1,100) <= 60)
Condition totals: 1 of 1 input term covered = 100.00%

                     Input Term   Covered  Reason for no coverage   Hint
                    -----------  --------  -----------------------  --------------
  ($urandom_range(1,100) <= 60)         Y

     Rows:       Hits  FEC Target                       Non-masking condition(s)      
 ---------  ---------  --------------------             -------------------------     
  Row   1:          1  ($urandom_range(1,100) <= 60)_0  -                             
  Row   2:          1  ($urandom_range(1,100) <= 60)_1  -                             

----------------Focused Condition View-------------------
Line       145 Item    1  (name != 0)
Condition totals: 0 of 1 input term covered = 0.00%

   Input Term   Covered  Reason for no coverage   Hint
  -----------  --------  -----------------------  --------------
  (name != 0)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (name != 0)_0         -                             
  Row   2:    ***0***  (name != 0)_1         -                             

----------------Focused Condition View-------------------
Line       145 Item    2  (tmp_data__ != null)
Condition totals: 0 of 1 input term covered = 0.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (tmp_data__ != null)         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:          1  (tmp_data__ != null)_0  -                             
  Row   2:    ***0***  (tmp_data__ != null)_1  -                             


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                     103        61        42    59.22%

================================Statement Details================================

Statement Coverage for instance /RAM_sequence_pkg --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File RAM_sequence.sv
    1                                                package RAM_sequence_pkg;
    2                                                    import uvm_pkg::*;
    3                                                    import RAM_pkg::*;
    4                                                    `include "uvm_macros.svh"
    5                                                class reset_sequence extends uvm_sequence #(RAM_sequence_item);
    6               1                    ***0***         `uvm_object_utils(reset_sequence)
    6               2                    ***0***     
    6               3                    ***0***     
    6               4                    ***0***     
    6               5                    ***0***     
    6               6                          1     
    6               7                    ***0***     
    6               8                    ***0***     
    6               9                          1     
    6              10                    ***0***     
    7                                                
    8                                                    RAM_sequence_item seq_item;
    9                                                
    10                                                   function new(string name = "reset_sequence");
    11              1                          1             super.new(name);
    12                                                   endfunction
    13                                               
    14                                                   task body();
    15              1                          1             seq_item = RAM_sequence_item::type_id::create("seq_item");
    16              1                          1             start_item(seq_item);
    17              1                          1             seq_item.rst_n = 0;
    18              1                          1             seq_item.rx_valid = 0;
    19              1                          1             seq_item.din = 0;
    20              1                          1             finish_item(seq_item);
    21                                                       
    22                                                       // Release reset
    23              1                          1             seq_item = RAM_sequence_item::type_id::create("seq_item");
    24              1                          1             start_item(seq_item);
    25              1                          1             seq_item.rst_n = 1;
    26              1                          1             seq_item.rx_valid = 0;
    27              1                          1             seq_item.din = 0;
    28              1                          1             finish_item(seq_item);
    29                                                   endtask
    30                                               endclass
    31                                               
    32                                               // Write Only Sequence
    33                                               class write_only_sequence extends uvm_sequence #(RAM_sequence_item);
    34              1                    ***0***         `uvm_object_utils(write_only_sequence)
    34              2                    ***0***     
    34              3                    ***0***     
    34              4                    ***0***     
    34              5                    ***0***     
    34              6                          1     
    34              7                    ***0***     
    34              8                    ***0***     
    34              9                          1     
    34             10                    ***0***     
    35                                               
    36                                                   RAM_sequence_item seq_item;
    37              1                          1         bit [1:0] prev_op = 2'b00;
    38                                               
    39                                                   function new(string name = "write_only_sequence");
    40              1                          1             super.new(name);
    41                                                   endfunction
    42                                               
    43                                                   task body();
    44              1                         30             repeat(30) begin
    45              1                         30                 seq_item = RAM_sequence_item::type_id::create("seq_item");
    46              1                         30                 start_item(seq_item);
    47                                                           assert(seq_item.randomize());
    48                                                           
    49              1                         30                 seq_item.rx_valid = 1;
    50                                                           case(prev_op)
    51                                                               2'b00: begin
    52              1                         14                         seq_item.din[9:8] = $urandom_range(0,1) ? 2'b00 : 2'b01;
    53                                                               end
    54                                                               2'b01: begin
    55              1                         16                         seq_item.din[9:8] = $urandom_range(0,1) ? 2'b00 : 2'b01;
    56                                                               end
    57                                                               default: begin
    58              1                    ***0***                         seq_item.din[9:8] = 2'b00;
    59                                                               end
    60                                                           endcase
    61                                                           
    62              1                         30                 prev_op = seq_item.din[9:8];
    63              1                         30                 finish_item(seq_item);
    64                                                       end
    65                                                   endtask
    66                                               endclass
    67                                               
    68                                               // Read Only Sequence
    69                                               class read_only_sequence extends uvm_sequence #(RAM_sequence_item);
    70              1                    ***0***         `uvm_object_utils(read_only_sequence)
    70              2                    ***0***     
    70              3                    ***0***     
    70              4                    ***0***     
    70              5                    ***0***     
    70              6                          1     
    70              7                    ***0***     
    70              8                    ***0***     
    70              9                          1     
    70             10                    ***0***     
    71                                               
    72                                                   RAM_sequence_item seq_item;
    73              1                          1         bit [1:0] prev_op = 2'b10;
    74                                               
    75                                                   function new(string name = "read_only_sequence");
    76              1                          1             super.new(name);
    77                                                   endfunction
    78                                               
    79                                                   task body();
    80              1                       1000             repeat(1000) begin
    81              1                       1000                 seq_item = RAM_sequence_item::type_id::create("seq_item");
    82              1                       1000                 start_item(seq_item);
    83                                                           assert(seq_item.randomize());
    84                                                           
    85              1                       1000                 seq_item.rx_valid = 1;
    86                                                           case(prev_op)
    87                                                               2'b10: begin
    88              1                        504                         seq_item.din[9:8] = $urandom_range(0,1) ? 2'b10 : 2'b11;
    89                                                               end
    90                                                               2'b11: begin
    91              1                        496                         seq_item.din[9:8] = $urandom_range(0,1) ? 2'b10 : 2'b11;
    92                                                               end
    93                                                               default: begin
    94              1                    ***0***                         seq_item.din[9:8] = 2'b10;
    95                                                               end
    96                                                           endcase
    97                                                           
    98              1                       1000                 prev_op = seq_item.din[9:8];
    99              1                       1000                 finish_item(seq_item);
    100                                                      end
    101                                                  endtask
    102                                              endclass
    103                                              
    104                                              // Write-Read Sequence
    105                                              class write_read_sequence extends uvm_sequence #(RAM_sequence_item);
    106             1                    ***0***         `uvm_object_utils(write_read_sequence)
    106             2                    ***0***     
    106             3                    ***0***     
    106             4                    ***0***     
    106             5                    ***0***     
    106             6                          1     
    106             7                    ***0***     
    106             8                    ***0***     
    106             9                          1     
    106            10                    ***0***     
    107                                              
    108                                                  RAM_sequence_item seq_item;
    109             1                          1         bit [1:0] prev_op = 2'b00;
    110                                              
    111                                                  function new(string name = "write_read_sequence");
    112             1                          1             super.new(name);
    113                                                  endfunction
    114                                              
    115                                                  task body();
    116             1                       1000             repeat(1000) begin
    117             1                       1000                 seq_item = RAM_sequence_item::type_id::create("seq_item");
    118             1                       1000                 start_item(seq_item);
    119                                                          assert(seq_item.randomize());
    120                                                          
    121             1                       1000                 seq_item.rx_valid = 1;
    122                                                          case(prev_op)
    123                                                              2'b00: begin
    124             1                        350                         seq_item.din[9:8] = $urandom_range(0,1) ? 2'b00 : 2'b01;
    125                                                              end
    126                                                              2'b01: begin
    127             1                        164                         seq_item.din[9:8] = ($urandom_range(1,100) <= 60) ? 2'b10 : 2'b00;
    128                                                              end
    129                                                              2'b10: begin
    130             1                        328                         seq_item.din[9:8] = $urandom_range(0,1) ? 2'b10 : 2'b11;
    131                                                              end
    132                                                              2'b11: begin
    133             1                        158                         seq_item.din[9:8] = ($urandom_range(1,100) <= 60) ? 2'b00 : 2'b10;
    134                                                              end
    135                                                          endcase
    136                                                          
    137             1                       1000                 prev_op = seq_item.din[9:8];
    138             1                       1000                 finish_item(seq_item);
    139                                                      end
    140                                                  endtask
    141                                              endclass
    142                                              
    143                                              // Main Sequence
    144                                              class main_sequence extends uvm_sequence #(RAM_sequence_item);
    145             1                    ***0***         `uvm_object_utils(main_sequence)
    145             2                    ***0***     
    145             3                    ***0***     
    145             4                    ***0***     
    145             5                    ***0***     
    145             6                          1     
    145             7                    ***0***     
    145             8                    ***0***     
    145             9                          1     
    145            10                    ***0***     
    146                                              
    147                                                  RAM_sequence_item seq_item;
    148                                              
    149                                                  function new(string name = "main_sequence");
    150             1                          1             super.new(name);
    151                                                  endfunction
    152                                              
    153                                                  task body();
    154             1                       1000             repeat(1000) begin
    155             1                       1000                 seq_item = RAM_sequence_item::type_id::create("seq_item");
    156             1                       1000                 start_item(seq_item);
    157                                                          assert(seq_item.randomize());
    158             1                       1000                 seq_item.rx_valid = 1;
    159             1                       1000                 finish_item(seq_item);


=================================================================================
=== Instance: /RAM_test_pkg
=== Design Unit: work.RAM_test_pkg
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        14         6         8    42.85%

================================Branch Details================================

Branch Coverage for instance /RAM_test_pkg

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File RAM_test.sv
------------------------------------IF Branch------------------------------------
    33                                         1     Count coming in to IF
    33              1                    ***0***             if (!uvm_config_db #(virtual RAM_if)::get(this, "", "RAM_IF", cfg.vif))
                                               1     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    34                                   ***0***     Count coming in to IF
    34              1                    ***0***                 `uvm_fatal("build_phase", "Test - unable to get the wrapper virtual interface");
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    45                                         1     Count coming in to IF
    45              1                          1             `uvm_info(get_type_name(), "Starting Reset Sequence", UVM_MEDIUM)
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    51                                         1     Count coming in to IF
    51              1                          1             `uvm_info(get_type_name(), "Starting Write Only Sequence", UVM_MEDIUM)
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    57                                         1     Count coming in to IF
    57              1                          1             `uvm_info(get_type_name(), "Starting Read Only Sequence", UVM_MEDIUM)
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    63                                         1     Count coming in to IF
    63              1                          1             `uvm_info(get_type_name(), "Starting Write-Read Sequence", UVM_MEDIUM)
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    70                                         1     Count coming in to IF
    70              1                          1             `uvm_info(get_type_name(), "Starting Main Sequence", UVM_MEDIUM)
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      33        30         3    90.90%

================================Statement Details================================

Statement Coverage for instance /RAM_test_pkg --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File RAM_test.sv
    1                                                package RAM_test_pkg;
    2                                                    import uvm_pkg::*;
    3                                                    `include "uvm_macros.svh" 
    4                                                    import RAM_pkg::*;
    5                                                    import RAM_sequence_pkg::*;
    6                                                    import RAM_env_pkg::*; 
    7                                                    import RAM_config_obj_pkg::*;
    8                                                class RAM_test extends uvm_test;
    9               1                    ***0***         `uvm_component_utils(RAM_test)
    9               2                    ***0***     
    9               3                         14     
    10                                                   RAM_env env;
    11                                                   RAM_config_obj cfg;
    12                                                   virtual RAM_if vif;
    13                                                   reset_sequence rst_seq;
    14                                                   write_only_sequence wr_seq;
    15                                                   read_only_sequence rd_seq;
    16                                                   write_read_sequence wr_rd_seq;
    17                                                   main_sequence main_seq;
    18                                               
    19                                                   function new(string name = "RAM_test", uvm_component parent = null);
    20              1                          1             super.new(name, parent);
    21                                                   endfunction
    22                                               
    23                                                   function void build_phase(uvm_phase phase);
    24              1                          1             super.build_phase(phase);
    25              1                          1             cfg = RAM_config_obj::type_id::create("cfg", this);
    26              1                          1             env = RAM_env::type_id::create("env", this);
    27              1                          1             rst_seq = reset_sequence::type_id::create("rst_seq", this);
    28              1                          1             wr_seq = write_only_sequence::type_id::create("wr_seq", this);
    29              1                          1             rd_seq = read_only_sequence::type_id::create("rd_seq", this);
    30              1                          1             wr_rd_seq = write_read_sequence::type_id::create("wr_rd_seq", this);
    31              1                          1             main_seq = main_sequence::type_id::create("main_seq", this);
    32                                               
    33                                                       if (!uvm_config_db #(virtual RAM_if)::get(this, "", "RAM_IF", cfg.vif))
    34              1                    ***0***                 `uvm_fatal("build_phase", "Test - unable to get the wrapper virtual interface");
    35                                               
    36              1                          1             cfg.is_active = UVM_ACTIVE;
    37                                               
    38              1                          1             uvm_config_db#(RAM_config_obj)::set(this, "*", "RAM_config_obj", cfg);
    39                                                   endfunction
    40                                               
    41                                                   task run_phase(uvm_phase phase);
    42              1                          1             super.run_phase(phase);
    43              1                          1             phase.raise_objection(this);
    44                                               
    45              1                          1             `uvm_info(get_type_name(), "Starting Reset Sequence", UVM_MEDIUM)
    46                                                       
    47              1                          1             rst_seq.start(env.agt.sqr);
    48                                               
    49              1                          1             #10;
    50                                               
    51              1                          1             `uvm_info(get_type_name(), "Starting Write Only Sequence", UVM_MEDIUM)
    52                                               
    53              1                          1             wr_seq.start(env.agt.sqr);
    54                                               
    55              1                          1             #10;
    56                                               
    57              1                          1             `uvm_info(get_type_name(), "Starting Read Only Sequence", UVM_MEDIUM)
    58                                               
    59              1                          1             rd_seq.start(env.agt.sqr);
    60                                               
    61              1                          1             #10;
    62                                               
    63              1                          1             `uvm_info(get_type_name(), "Starting Write-Read Sequence", UVM_MEDIUM)
    64                                               
    65                                               
    66              1                          1             wr_rd_seq.start(env.agt.sqr);
    67                                               
    68              1                          1             #10;
    69                                                   
    70              1                          1             `uvm_info(get_type_name(), "Starting Main Sequence", UVM_MEDIUM)
    71                                               
    72              1                          1             main_seq.start(env.agt.sqr);
    73                                               
    74              1                          1             #100;
    75                                               
    76              1                          1             phase.drop_objection(this);


COVERGROUP COVERAGE:
----------------------------------------------------------------------------------------------------------
Covergroup                                             Metric       Goal       Bins    Status               
                                                                                                         
----------------------------------------------------------------------------------------------------------
 TYPE /RAM_coverage_pkg/RAM_coverage/cvr_grp          100.00%        100          -    Covered              
    covered/total bins:                                    16         16          -                      
    missing/total bins:                                     0         16          -                      
    % Hit:                                            100.00%        100          -                      
    Coverpoint cp_din                                 100.00%        100          -    Covered              
        covered/total bins:                                 4          4          -                      
        missing/total bins:                                 0          4          -                      
        % Hit:                                        100.00%        100          -                      
    Coverpoint cp_rx_valid                            100.00%        100          -    Covered              
        covered/total bins:                                 2          2          -                      
        missing/total bins:                                 0          2          -                      
        % Hit:                                        100.00%        100          -                      
    Coverpoint cp_tx_valid                            100.00%        100          -    Covered              
        covered/total bins:                                 2          2          -                      
        missing/total bins:                                 0          2          -                      
        % Hit:                                        100.00%        100          -                      
    Coverpoint cp_write_sequence                      100.00%        100          -    Covered              
        covered/total bins:                                 1          1          -                      
        missing/total bins:                                 0          1          -                      
        % Hit:                                        100.00%        100          -                      
    Coverpoint cp_read_sequence                       100.00%        100          -    Covered              
        covered/total bins:                                 1          1          -                      
        missing/total bins:                                 0          1          -                      
        % Hit:                                        100.00%        100          -                      
    Coverpoint cp_full_sequence                       100.00%        100          -    Covered              
        covered/total bins:                                 1          1          -                      
        missing/total bins:                                 0          1          -                      
        % Hit:                                        100.00%        100          -                      
    Cross cross_din_rx_valid                          100.00%        100          -    Covered              
        covered/total bins:                                 4          4          -                      
        missing/total bins:                                 0          4          -                      
        % Hit:                                        100.00%        100          -                      
    Cross cross_read_tx_valid                         100.00%        100          -    Covered              
        covered/total bins:                                 1          1          -                      
        missing/total bins:                                 0          1          -                      
        % Hit:                                        100.00%        100          -                      
 Covergroup instance \/RAM_coverage_pkg::RAM_coverage::cvr_grp  
                                                      100.00%        100          -    Covered              
    covered/total bins:                                    16         16          -                      
    missing/total bins:                                     0         16          -                      
    % Hit:                                            100.00%        100          -                      
    Coverpoint cp_din                                 100.00%        100          -    Covered              
        covered/total bins:                                 4          4          -                      
        missing/total bins:                                 0          4          -                      
        % Hit:                                        100.00%        100          -                      
        bin write_address                                 380          1          -    Covered              
        bin write_data                                    190          1          -    Covered              
        bin read_address                                 1810          1          -    Covered              
        bin read_data                                     666          1          -    Covered              
    Coverpoint cp_rx_valid                            100.00%        100          -    Covered              
        covered/total bins:                                 2          2          -                      
        missing/total bins:                                 0          2          -                      
        % Hit:                                        100.00%        100          -                      
        bin high                                         3043          1          -    Covered              
        bin low                                             3          1          -    Covered              
    Coverpoint cp_tx_valid                            100.00%        100          -    Covered              
        covered/total bins:                                 2          2          -                      
        missing/total bins:                                 0          2          -                      
        % Hit:                                        100.00%        100          -                      
        bin high                                          655          1          -    Covered              
        bin low                                          2391          1          -    Covered              
    Coverpoint cp_write_sequence                      100.00%        100          -    Covered              
        covered/total bins:                                 1          1          -                      
        missing/total bins:                                 0          1          -                      
        % Hit:                                        100.00%        100          -                      
        bin write_add_to_write_data                       173          1          -    Covered              
    Coverpoint cp_read_sequence                       100.00%        100          -    Covered              
        covered/total bins:                                 1          1          -                      
        missing/total bins:                                 0          1          -                      
        % Hit:                                        100.00%        100          -                      
        bin read_add_to_read_data                         424          1          -    Covered              
    Coverpoint cp_full_sequence                       100.00%        100          -    Covered              
        covered/total bins:                                 1          1          -                      
        missing/total bins:                                 0          1          -                      
        % Hit:                                        100.00%        100          -                      
        bin full_wr_rd                                     43          1          -    Covered              
    Cross cross_din_rx_valid                          100.00%        100          -    Covered              
        covered/total bins:                                 4          4          -                      
        missing/total bins:                                 0          4          -                      
        % Hit:                                        100.00%        100          -                      
        Auto, Default and User Defined Bins:
            bin <read_data,high>                          666          1          -    Covered              
            bin <write_data,high>                         190          1          -    Covered              
            bin <read_address,high>                      1810          1          -    Covered              
            bin <write_address,high>                      377          1          -    Covered              
        Illegal and Ignore Bins:
            ignore_bin ignore_rx_low                        3                     -    Occurred             
    Cross cross_read_tx_valid                         100.00%        100          -    Covered              
        covered/total bins:                                 1          1          -                      
        missing/total bins:                                 0          1          -                      
        % Hit:                                        100.00%        100          -                      
        Auto, Default and User Defined Bins:
            bin read_with_tx                              655          1          -    Covered              
        Illegal and Ignore Bins:
            ignore_bin ignore_others                     2391                     -    Occurred             

TOTAL COVERGROUP COVERAGE: 100.00%  COVERGROUP TYPES: 1

DIRECTIVE COVERAGE:
--------------------------------------------------------------------------------------------
Name                                     Design Design   Lang File(Line)      Hits Status    
                                         Unit   UnitType                                     
--------------------------------------------------------------------------------------------
/RAM_top/dut/ram_assertions_inst/cover_reset_outputs 
                                         RAM_assertions Verilog  SVA  RAM_assertions.sv(16)
                                                                                66 Covered   
/RAM_top/dut/ram_assertions_inst/cover_tx_valid_input 
                                         RAM_assertions Verilog  SVA  RAM_assertions.sv(25)
                                                                              2322 Covered   
/RAM_top/dut/ram_assertions_inst/cover_tx_valid_read 
                                         RAM_assertions Verilog  SVA  RAM_assertions.sv(34)
                                                                               655 Covered   
/RAM_top/dut/ram_assertions_inst/cover_write_sequence 
                                         RAM_assertions Verilog  SVA  RAM_assertions.sv(52)
                                                                               344 Covered   
/RAM_top/dut/ram_assertions_inst/cover_read_sequence 
                                         RAM_assertions Verilog  SVA  RAM_assertions.sv(70)
                                                                              1091 Covered   

TOTAL DIRECTIVE COVERAGE: 100.00%  COVERS: 5

ASSERTION RESULTS:
--------------------------------------------------------------------
Name                 File(Line)                   Failure      Pass 
                                                  Count        Count
--------------------------------------------------------------------
/RAM_top/dut/ram_assertions_inst/assert_reset_outputs
                     RAM_assertions.sv(13)              0          1
/RAM_top/dut/ram_assertions_inst/assert_tx_valid_input
                     RAM_assertions.sv(22)              0          1
/RAM_top/dut/ram_assertions_inst/assert_tx_valid_read
                     RAM_assertions.sv(31)              0          1
/RAM_top/dut/ram_assertions_inst/assert_write_sequence
                     RAM_assertions.sv(49)              0          1
/RAM_top/dut/ram_assertions_inst/assert_read_sequence
                     RAM_assertions.sv(67)              0          1
/RAM_sequence_pkg/write_only_sequence/body/#ublk#33852551#44/immed__47
                     RAM_sequence.sv(47)                0          1
/RAM_sequence_pkg/read_only_sequence/body/#ublk#33852551#80/immed__83
                     RAM_sequence.sv(83)                0          1
/RAM_sequence_pkg/write_read_sequence/body/#ublk#33852551#116/immed__119
                     RAM_sequence.sv(119)               0          1
/RAM_sequence_pkg/main_sequence/body/#ublk#33852551#154/immed__157
                     RAM_sequence.sv(157)               0          1

Total Coverage By Instance (filtered view): 77.93%

